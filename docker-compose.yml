version: '2.2'

networks:
  backend2network:

services:
  # configuration service
  config-server:
    build: config-server/
    ports:
      - "8888:8888"
    networks:
      - backend2network
    depends_on:
      - zipkin
    healthcheck:
      test: "curl -f http://config-server:8888/actuator/health || exit 1"
      interval: 20s
      timeout: 10s
      retries: 5


  # registry service
  eureka-server:
    build: eureka-server/
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - backend2network
    healthcheck:
      test: "curl -f http://eureka-server:8761/actuator/health || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5


  # Base de datos MySQL
  mysql:
    image: mysql:5.7
    ports:
      - "3306:3306"
    expose:
      - "3306"
    networks:
        - backend2network
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: movie-dev

 # Base de datos MongoDB
  mongodb:
    image: mongo:4.4.2
    ports:
      - "27017:27017"
    command: mongod
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 5s
      timeout: 2s
      retries: 60
    volumes:
      - ./configInit/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - backend2network


  # Microservicio de Mensajeria
  rabbit-mq:
    image: rabbitmq:3.8.14-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./configInit/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./configInit/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - backend2network

  # Microservicio de Trazas
  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - backend2network
    depends_on:
      rabbit-mq:
        condition: service_started

  # Microservicio Movies
  movie-service:
    build: movie-service/
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - backend2network
    ports:
      - "8081:8081"

  # Microservicio Serie
  serie-service:
    build: serie-service/
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - backend2network
    ports:
      - "8083:8083"

  # Microservicio Catalog
  catalog-service:
    build: catalog-service/
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - backend2network
    ports:
      - "8082:8082"

  # Microservicio de Gateway
  gateway-service:
    build: gateway-service/
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - backend2network